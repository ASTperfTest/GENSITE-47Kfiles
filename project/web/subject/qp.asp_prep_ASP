: @ codepage = 65001 :   
response.charset = "utf-8"
response.cachecontrol = "no-cache" 
response.addheader "pragma", "no-cache" 
response.expires = -1
   CxMethod_ASP_checkurl_711317765()
   CxMethod_ASP_checkpoint_beforeloadxml_1893843243()


  
call checkurl(request.querystring)
function nulltext(xnode)
  on error resume next
  xstr = ""
  xstr = xnode.text
  nulltext = xstr
end function

 set oxml = server.createobject("microsoft.xmldom")
 oxml.async = false
 oxml.setproperty("serverhttprequest") = true 
 set oxsl = server.createobject("microsoft.xmldom")
 set oxsl = server.createobject("microsoft.xmldom")
 qstr = request.querystring
 if instr(qstr,"mp=")=0 then qstr = qstr & "&mp=" & session("mptree")
 
 memid = session("memid")
 gstyle = session("gstyle")
 

'this function in include file
call checkpoint_beforeloadxml(request("mp"), request("ctnode"), request("xitem"))
 
 
 xv = oxml.load(session("myxdurl") & "/wsxd/xdqp.asp?" & qstr & "&memid=" & memid & "&gstyle=" & gstyle)
 'response.write (session("myxdurl") & "/wsxd/xdqp.asp?" &qstr)
  if oxml.parseerror.reason <> "" then 
    response.write("xhtpagedom parseerror on line " &  oxml.parseerror.line)
    response.write("<br>reason: " &  oxml.parseerror.reason)
    response.end()
  end if
    xmystyle=nulltext(oxml.selectsinglenode("//hpmain/mpstyle"))
 if xmystyle="" then
        xmystyle=nulltext(oxml.selectsinglenode("//hpmain/mystyle"))
    if xmystyle="" then xmystyle=session("mystyle") 
 end if 
 oxsl.load(server.mappath("xslgip/" & xmystyle & "/qp.xsl"))
 

   fstyle = oxml.selectsinglenode("//xsldata").text
   if fstyle <> "" then
  set fxsl = server.createobject("microsoft.xmldom")
  fxsl.load(server.mappath("xslgip/" & fstyle & ".xsl"))
  set oxroot = oxsl.selectsinglenode("xsl:stylesheet")
 
 on error resume next
  for each xs in fxsl.selectnodes("//xsl:template")
   set nx = xs.clonenode(true)
   ckstr = "@match='" & nx.getattribute("match") & "'"
   if nx.getattribute("mode")<>"" then  ckstr = ckstr & " and @mode='" & nx.getattribute("mode") & "'"
   set orgex = oxroot.selectsinglenode("//xsl:template[" & ckstr & "]")
   oxroot.removechild orgex
   oxroot.appendchild nx
  next
 end if  

' response.write oxml.xml
' response.end
 response.contenttype = "text/html" 
 outstring = replace(oxml.transformnode(oxsl),"<meta http-equiv=""content-type"" content=""text/html; charset=utf-8"">","")
 outstring = replace(outstring,"2007 all rights reserved",year(date) & " all rights reserved")
 response.write replace(outstring,"&amp;","&")

' response.write oxml.transformnode(oxsl)
' response.write oxml.xml & "<hr>"
' response.write oxsl.xml & "<hr>"
 