: 
class cls_des
    private iprule, cprule, eprule, prule, sbox(7), pcrule(1), mvrule
    private k(16), l(16), r(16)
    private fillcode, desstatus
    private fillchr
    
    private sub class_initialize()
        desstatus = -1
        'fillcode = "0001101"
 'fillchr = chr(13)
        fillcode = "0000000"
 fillchr = chr(0)
        iprule = "58,50,42,34,26,18,10,2," &_
            "60,52,44,36,28,20,12,4," &_
            "62,54,46,38,30,22,14,6," &_
            "64,56,48,40,32,24,16,8," &_
            "57,49,41,33,25,17, 9,1," &_
            "59,51,43,35,27,19,11,3," &_
            "61,53,45,37,29,21,13,5," &_
            "63,55,47,39,31,23,15,7,"
        cprule = "40, 8,48,16,56,24,64,32," &_
            "39, 7,47,15,55,23,63,31," &_
            "38, 6,46,14,54,22,62,30," &_
            "37, 5,45,13,53,21,61,29," &_
            "36, 4,44,12,52,20,60,28," &_
            "35, 3,43,11,51,19,59,27," &_
            "34, 2,42,10,50,18,58,26," &_
            "33, 1,41, 9,49,17,57,25,"
        eprule = "32, 1, 2, 3, 4, 5," &_
            " 4, 5, 6, 7, 8, 9," &_
            " 8, 9,10,11,12,13," &_
            "12,13,14,15,16,17," &_
            "16,17,18,19,20,21," &_
            "20,21,22,23,24,25," &_
            "24,25,26,27,28,29," &_
            "28,29,30,31,32, 1,"
        prule = "16, 7,20,21,29,12,28,17," &_
            " 1,15,23,26, 5,18,31,10," &_
            " 2, 8,24,14,32,27, 3, 9," &_
            "19,13,30, 6,22,11, 4,25,"
        sbox(0) = "14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7," &_
            " 0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8," &_
            " 4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0," &_
            "15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13,"
        sbox(1) = "15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10," &_
            " 3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5," &_
            " 0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15," &_
            "13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9,"
        sbox(2) = "10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8," &_
            "13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1," &_
            "13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7," &_
            " 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12,"
        sbox(3) = " 7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15," &_
            "13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9," &_
            "10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4," &_
            " 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14,"
        sbox(4) = " 2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9," &_
            "14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6," &_
            " 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14," &_
            "11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3,"
        sbox(5) = "12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11," &_
            "10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8," &_
            " 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6," &_
            " 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13,"
        sbox(6) = " 4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1," &_
            "13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6," &_
            " 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2," &_
            " 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12,"
        sbox(7) = "13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7," &_
            " 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2," &_
            " 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8," &_
            " 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11,"
        pcrule(0) = "57,49,41,33,25,17, 9," &_
            " 1,58,50,42,34,26,18," &_
            "10, 2,59,51,43,35,27," &_
            "19,11, 3,60,52,44,36," &_
            "63,55,47,39,31,23,15," &_
            " 7,62,54,46,38,30,22," &_
            "14, 6,61,53,45,37,29," &_
            "21,13, 5,28,20,12, 4,"
        pcrule(1) = "14,17,11,24, 1, 5, 3,28," &_
            "15, 6,21,10,23,19,12, 4," &_
            "26, 8,16, 7,27,20,13, 2," &_
            "41,52,31,37,47,55,30,40," &_
            "51,45,33,48,44,49,39,56," &_
            "34,53,46,42,50,36,29,32,"
        mvrule = "1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1"
    end sub
    
    private function permute(byval rule, byval text)
        dim p_rule, num, ptext
        ptext = ""
        p_rule = split(rule, ",")
        for each num in p_rule
            num = trim(num) & ""
            if num <> "" then
                num = clng(num)
                ptext = ptext & mid(text, num, 1)
            end if
        next
        erase p_rule
        permute = ptext
    end function
    
    private function createkey()
        dim ipkey, c(16), d(16), i, mv_rule, mvlen
        ipkey = permute(pcrule(0), k(0))
        c(0) = left(ipkey, 28)
        d(0) = right(ipkey, 28)
        mv_rule = split(mvrule, ",")
        for i = 1 to 16
            mvlen = clng(trim(mv_rule(i - 1)))
            c(i) = right(c(i -1), len(c(i -1)) - mvlen) & left(c(i -1), mvlen)
            d(i) = right(d(i -1), len(d(i -1)) - mvlen) & left(d(i -1), mvlen)
            k(i) = permute(pcrule(1), c(i) & d(i))
        next
    end function

    private function ip(byval text)
        dim iptext
        iptext = permute(iprule, text)
        l(0) = left(iptext, 32)
        r(0) = right(iptext, 32)
        ip = iptext
    end function
    
    private function iterativelr()
        dim i
        for i = 1 to 16
            l(i) = r(i - 1)
            r(i) = b_xor(l(i - 1), f(r(i - 1), k(i)))
        next
    end function
    
    private function f(byval rtext, byval keys)
        dim eptext, xortext, result, skey(7), i, x, y
        result = ""
        eptext = permute(eprule, rtext)
        xortext = b_xor(eptext, keys)
        for i = 1 to len(xortext) \ 6
            skey(i - 1) = mid(xortext, (i - 1) * 6 + 1, 6)
            x = binarytodecimal(left(skey(i - 1), 1) & right(skey(i - 1), 1))
            y = binarytodecimal(mid(skey(i - 1), 2, 4))
            skey(i - 1) = decimaltobinary(trim(split(sbox(i -1), ",")(x * 16 + y)))
            if len(skey(i - 1)) < 4 then
                select case (4 - len(skey(i - 1)))
                    case 1
                        skey(i - 1) = "0" & skey(i - 1)
                    case 2
                        skey(i - 1) = "00" & skey(i - 1)
                    case 3
                        skey(i - 1) = "000" & skey(i - 1)
                end select
            end if
            result = result & skey(i - 1)
        next
        result = permute(prule, result)
        f = result
    end function
    
    private function b_xor(byval expression1, byval expression2)
        dim e, k, i, xortext
        xortext = ""
        e = trim(expression1) & ""
        k = trim(expression2) & ""
        for i = 1 to len(k)
            xortext = xortext & cstr(cint(mid(e, i, 1)) xor cint(mid(k, i, 1)))
        next
        b_xor = xortext
    end function
    
    private function binarytodecimal(byval binnum)
        dim binary, decimal, i, length
        decimal = 0
        binary = trim(binnum) & ""
        if binary <> "" then
            while left(binary, 1) = "0"
                binary = right(binary, len(binary) - 1)
            wend
            length = len(binary)
            for i = 1 to length
                decimal = decimal + cint(mid(binary, i, 1)) * 2^(length - i)
            next
        end if
        binarytodecimal = decimal
    end function
    
    private function decimaltobinary(byval decnum)
        dim decimal, binary, division
        binary = ""
        decimal = trim(decnum) & ""
        if decimal <> "" then
            decimal = clng(decimal)
            while decimal > 1
                binary = binary & cstr(decimal mod 2)
                decimal = decimal \ 2
            wend
            binary = strreverse(binary & decimal)
        end if
        decimaltobinary = binary
    end function
    
    private function strtobinary(byval str)
        dim data, binary, text, textlen, i
        text = ""
        data = str
        for i = 1 to len(data)
            binary = cstr(decimaltobinary(asc(mid(data, i, 1))))
            if len(binary) < 7 then
                select case (7 - len(binary))
                    case 1
                        binary = "0" & binary
                    case 2
                        binary = "00" & binary
                    case 3
                        binary = "000" & binary
                    case 4
                        binary = "0000" & binary
                    case 5
                        binary = "00000" & binary
                    case 6
                        binary = "000000" & binary
                end select
            end if
            text = text & binary
        next
        textlen = len(text)
        if textlen >= 63 then
            if (textlen mod 63) <> 0 then
                for i = 1 to ((textlen - textlen mod 63) \ 7)
                    text = text & fillcode
                next
            end if
        else
            for i = 1 to ((63 - textlen) \ 7)
                text = text & fillcode
            next
        end if

        binary = text
        text = ""
        for i = 0 to (len(binary) \ 63 - 1)
            text = text & mid(binary, i * 63 + 1, 63) & "0"
        next
        strtobinary = text
    end function
    
    private function binarytostr(byval binnum)
        dim text, bintext, length, group, i, j
        text = ""
        bintext = trim(binnum) & ""
        if bintext <> "" then
            length = len(bintext) \ 64 - 1
            redim group(length)
            for i = 0 to length
                group(i) = left(mid(bintext, i * 64 + 1, 64), 63)
            next
            while right(group(length), 7) = fillcode
                group(length) = left(group(length), len(group(length)) - 7)
            wend
            for i = 0 to length
                for j = 1 to len(group(i)) \ 7
                    text = text & chr(binarytodecimal(mid(group(i), (j - 1) * 7 + 1, 7)))
                next
            next
            erase group
        end if
        binarytostr = text
    end function
    
    private function binarytohex(byval binnum)
        dim bintext, text, length, filllen, temp, i
        text = ""
        bintext = trim(binnum) & ""
        if bintext <> "" then
            length = len(bintext)
            if length >= 4 then
                filllen = length mod 4
            else
                filllen = 4 - length
            end if
            select case filllen
                case 1
                    bintext = "0" & bintext
                case 2
                    bintext = "00" & bintext
                case 3
                    bintext = "000" & bintext
            end select
            for i = 0 to (len(bintext) \ 4 - 1)
                temp = mid(bintext, i * 4 + 1, 4)
                select case temp
                    case "0000"
                        text = text & "0"
                    case "0001"
                        text = text & "1"
                    case "0010"
                        text = text & "2"
                    case "0011"
                        text = text & "3"
                    case "0100"
                        text = text & "4"
                    case "0101"
                        text = text & "5"
                    case "0110"
                        text = text & "6"
                    case "0111"
                        text = text & "7"
                    case "1000"
                        text = text & "8"
                    case "1001"
                        text = text & "9"
                    case "1010"
                        text = text & "a"
                    case "1011"
                        text = text & "b"
                    case "1100"
                        text = text & "c"
                    case "1101"
                        text = text & "d"
                    case "1110"
                        text = text & "e"
                    case "1111"
                        text = text & "f"
                end select
            next
        end if
        binarytohex = text
    end function
    
    private function hextobinary(byval hexnum)
        dim hextext, text, temp, i
        text = ""
        hextext = trim(hexnum) & ""
        for i = 1 to len(hextext)
            temp = ucase(mid(hextext, i, 1))
            select case temp
                case "0"
                    text = text & "0000"
                case "1"
                    text = text & "0001"
                case "2"
                    text = text & "0010"
                case "3"
                    text = text & "0011"
                case "4"
                    text = text & "0100"
                case "5"
                    text = text & "0101"
                case "6"
                    text = text & "0110"
                case "7"
                    text = text & "0111"
                case "8"
                    text = text & "1000"
                case "9"
                    text = text & "1001"
                case "a"
                    text = text & "1010"
                case "b"
                    text = text & "1011"
                case "c"
                    text = text & "1100"
                case "d"
                    text = text & "1101"
                case "e"
                    text = text & "1110"
                case "f"
                    text = text & "1111"
            end select
        next
        hextobinary = text
    end function
    
    private function keyreverse()
        dim temp, i
        for i = 1 to 8
            temp = k(i)
            k(i) = k(16 - i + 1)
            k(16 - i + 1) = temp
        next
    end function
    
    public function des(byval data, byval keys, byval work)
        dim text, i, group, grouplen
        text = data
        k(0) = hextobinary(keys)
        if work = 0 then
            text = strtobinary(text)
        else
            text = hextobinary(text)
        end if
        grouplen = len(text) \ 64 - 1
        redim group(grouplen)
        for i = 0 to grouplen
            group(i) = mid(text, i * 64 + 1, 64)
        next
        text = ""
        createkey()
        for i = 0 to grouplen
            ip(group(i))
            if work <> 0 and desstatus <> 1 then
                keyreverse()
                desstatus = 1
            elseif work = 0 and desstatus = 1 then
                keyreverse()
                desstatus = 0
            end if
            iterativelr()
            text = text & permute(cprule, r(16) & l(16))
        next
        erase group
        if work = 0 then
            text = binarytohex(text)
        else
            text = binarytostr(text)
        end if
 if instr(text,fillchr) > 0 then
     text = mid(text,1,instr(text,fillchr)-1)
 end if
        des = text
    end function
end class
 